// Copyright (c) Qualcomm Innovation Center, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

#ifndef ODML_LITERT_LITERT_VENDORS_QUALCOMM_CORE_BUILDERS_OP_CODE_H_
#define ODML_LITERT_LITERT_VENDORS_QUALCOMM_CORE_BUILDERS_OP_CODE_H_

#include <array>
#include <cstddef>

#include "third_party/qairt/latest/include/QNN/QnnOpDef.h"

namespace qnn {

enum class QnnOpCode {
  kQnnOpCodeArgbToRgb,
  kQnnOpCodeArgmax,
  kQnnOpCodeArgmin,
  kQnnOpCodeAxisAlignedBboxTransform,
  kQnnOpCodeBatchnorm,
  kQnnOpCodeBatchPermutation,
  kQnnOpCodeBatchToSpace,
  kQnnOpCodeBboxTransform,
  kQnnOpCodeBoxWithNmsLimit,
  kQnnOpCodeBuffer,
  kQnnOpCodeCast,
  kQnnOpCodeChannelShuffle,
  kQnnOpCodeCol2Im,
  kQnnOpCodeCollectRpnProposals,
  kQnnOpCodeCombinedNms,
  kQnnOpCodeConcat,
  kQnnOpCodeConstantOfShape,
  kQnnOpCodeConv1d,
  kQnnOpCodeConv2d,
  kQnnOpCodeConv3d,
  kQnnOpCodeConvert,
  kQnnOpCodeCorrelation1D,
  kQnnOpCodeCreateSparse,
  kQnnOpCodeCropAndResize,
  kQnnOpCodeCumulativeSum,
  kQnnOpCodeDepthToSpace,
  kQnnOpCodeDepthWiseConv1d,
  kQnnOpCodeDepthWiseConv2d,
  kQnnOpCodeDequantize,
  kQnnOpCodeDetectionOutput,
  kQnnOpCodeDistributeFpnProposals,
  kQnnOpCodeElementWiseAbs,
  kQnnOpCodeElementWiseAdd,
  kQnnOpCodeElementWiseAnd,
  kQnnOpCodeElementWiseAsin,
  kQnnOpCodeElementWiseAtan,
  kQnnOpCodeElementWiseBinary,
  kQnnOpCodeElementWiseCeil,
  kQnnOpCodeElementWiseCos,
  kQnnOpCodeElementWiseDivide,
  kQnnOpCodeElementWiseEqual,
  kQnnOpCodeElementWiseExp,
  kQnnOpCodeElementWiseFloor,
  kQnnOpCodeElementWiseFloorDiv,
  kQnnOpCodeElementWiseFmod,
  kQnnOpCodeElementWiseGreater,
  kQnnOpCodeElementWiseGreaterEqual,
  kQnnOpCodeElementWiseLess,
  kQnnOpCodeElementWiseLessEqual,
  kQnnOpCodeElementWiseLog,
  kQnnOpCodeElementWiseMaximum,
  kQnnOpCodeElementWiseMinimum,
  kQnnOpCodeElementWiseMod,
  kQnnOpCodeElementWiseMultiply,
  kQnnOpCodeElementWiseNeg,
  kQnnOpCodeElementWiseNeuron,
  kQnnOpCodeElementWiseNot,
  kQnnOpCodeElementWiseNotEqual,
  kQnnOpCodeElementWiseOr,
  kQnnOpCodeElementWisePower,
  kQnnOpCodeElementWiseRound,
  kQnnOpCodeElementWiseRsqrt,
  kQnnOpCodeElementWiseSelect,
  kQnnOpCodeElementWiseSin,
  kQnnOpCodeElementWiseSign,
  kQnnOpCodeElementWiseSoftplus,
  kQnnOpCodeElementWiseSquaredDifference,
  kQnnOpCodeElementWiseSquareRoot,
  kQnnOpCodeElementWiseSubtract,
  kQnnOpCodeElementWiseUnary,
  kQnnOpCodeElementWiseXor,
  kQnnOpCodeElu,
  kQnnOpCodeExpandDims,
  kQnnOpCodeExtractGlimpse,
  kQnnOpCodeExtractPatches,
  kQnnOpCodeFullyConnected,
  kQnnOpCodeGather,
  kQnnOpCodeGatherElements,
  kQnnOpCodeGatherNd,
  kQnnOpCodeGelu,
  kQnnOpCodeGenerateProposals,
  kQnnOpCodeGetSparseIndices,
  kQnnOpCodeGetSparseValues,
  kQnnOpCodeGridSample,
  kQnnOpCodeGroupNorm,
  kQnnOpCodeGru,
  kQnnOpCodeHardSwish,
  kQnnOpCodeHeatMapMaxKeyPoint,
  kQnnOpCodeIm2Col,
  kQnnOpCodeIf,
  kQnnOpCodeImageProjectionTransform,
  kQnnOpCodeInstanceNorm,
  kQnnOpCodeL2Norm,
  kQnnOpCodeL2Pool2d,
  kQnnOpCodeLayerNorm,
  kQnnOpCodeLogSoftmax,
  kQnnOpCodeLrn,
  kQnnOpCodeLstm,
  kQnnOpCodeMaskedSoftmax,
  kQnnOpCodeMoments,
  kQnnOpCodeMultiClassNms,
  kQnnOpCodeNonMaxSuppression,
  kQnnOpCodeNonZero,
  kQnnOpCodeNv12ToRgb,
  kQnnOpCodeNv21ToRgb,
  kQnnOpCodeOneHot,
  kQnnOpCodePack,
  kQnnOpCodeMatMul,
  kQnnOpCodePad,
  kQnnOpCodePoolAvg2d,
  kQnnOpCodePoolAvg3d,
  kQnnOpCodePoolMax2d,
  kQnnOpCodePoolMax3d,
  kQnnOpCodePrelu,
  kQnnOpCodeQuantize,
  kQnnOpCodeReduceMax,
  kQnnOpCodeReduceMean,
  kQnnOpCodeReduceMin,
  kQnnOpCodeReduceProd,
  kQnnOpCodeReduceSum,
  kQnnOpCodeReduceSumSquare,
  kQnnOpCodeRelu,
  kQnnOpCodeRelu1,
  kQnnOpCodeRelu6,
  kQnnOpCodeReluMinMax,
  kQnnOpCodeReshape,
  kQnnOpCodeResize,
  kQnnOpCodeResizeBilinear,
  kQnnOpCodeResizeNearestNeighbor,
  kQnnOpCodeRmsNorm,
  kQnnOpCodeRoiAlign,
  kQnnOpCodeRoiPooling,
  kQnnOpCodeScatterElements,
  kQnnOpCodeScatterNd,
  kQnnOpCodeShape,
  kQnnOpCodeSigmoid,
  kQnnOpCodeSoftmax,
  kQnnOpCodeSpaceToBatch,
  kQnnOpCodeSpaceToDepth,
  kQnnOpCodeSparseToDense,
  kQnnOpCodeSplit,
  kQnnOpCodeSqueeze,
  kQnnOpCodeStridedSlice,
  kQnnOpCodeTanh,
  kQnnOpCodeTile,
  kQnnOpCodeTopK,
  kQnnOpCodeTranspose,
  kQnnOpCodeTransposeConv1d,
  kQnnOpCodeTransposeConv2d,
  kQnnOpCodeTransposeConv3d,
  kQnnOpCodeUnPack,
  kQnnOpCodeUnknown,
};

const char* GetQnnOpType(QnnOpCode op);

}  // namespace qnn
#endif  // ODML_LITERT_LITERT_VENDORS_QUALCOMM_CORE_BUILDERS_OP_CODE_H_
